{"version":3,"sources":["components/Evaluacion.js","components/EvaluacionParte2.js","components/EvaluaionParte3.js","App.js","serviceWorker.js","index.js"],"names":["EvaluacionParte1","EvaluaParte2","useState","valor","setValor","numero","setNumero","onClick","console","log","EvaluaParte3","lista","setLista","mes","setMes","uniendoArray","texto","map","item","index","key","App","Evaluacion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yKAUeA,G,MARU,WACrB,OACI,6BACI,2E,OCeIC,EAnBM,WAAO,IAAD,EACCC,mBAAS,GADV,mBACjBC,EADiB,KACVC,EADU,OAEEF,mBAAS,GAFX,mBAEjBG,EAFiB,KAETC,EAFS,KAQvB,OACG,kBAAC,WAAD,KACA,4BAAQC,QAAS,kBAAMH,EAASD,EAAO,KAAvC,iBACA,6DAAmCA,GACnC,6BACA,4BAAQI,QATU,WAClBD,EAAUD,EAAO,GACjBG,QAAQC,IAAI,yBAOZ,cACA,wDAA8BJ,K,OCkCvBK,EA/CM,WAAO,IAAD,EACCR,mBAAS,IADV,mBAChBS,EADgB,KACTC,EADS,OAEHV,mBAAS,CAAC,QAAQ,UAAU,QAAQ,QAAQ,OAAO,QAAQ,UAFxD,mBAEhBW,EAFgB,KAEXC,EAFW,KAGjBC,EAAY,sBAAOJ,GAAP,YAAiBE,IAHZ,EAKKX,mBAAS,GALd,mBAKhBG,EALgB,KAKRC,EALQ,OAYGJ,mBAAS,CAAC,WAZb,mBAYhBc,EAZgB,UAkBvB,OACI,kBAAC,WAAD,KACI,sDAEID,EAAaE,KAAI,SAACC,EAAMC,GAAP,OACjB,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,MAGjC,6BACA,+EACA,4BAAQZ,QAtBM,WAElBD,EAAUD,EAAO,GACjBO,EAAS,GAAD,mBAAKD,GAAL,CAAYN,OAmBhB,kBAEIM,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACV,uBAAGC,IAAOD,GAAV,IAAoBD,EAApB,MAA6BC,MAGjC,6BACA,8DACA,4BAAQZ,QAvBK,WAEjBO,EAAO,GAAD,mBAAKD,GAAL,YAAYG,OAqBd,iBAEIH,EAAII,KAAI,SAACC,EAAMC,GAAP,OACJ,uBAAGC,IAAOD,GAAV,IAAmBD,EAAnB,MAA4BC,QCrBjCE,MAdf,WACE,OACE,6BACE,kBAACC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.eb328415.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst EvaluacionParte1 = () => {\r\n    return ( \r\n        <div>\r\n            <h1>Holaa, Primera parte de la evaluación</h1>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default EvaluacionParte1;","import React, {useState, Fragment } from 'react';\r\n const EvaluaParte2 = () => {\r\n    const [valor, setValor]= useState(0);\r\n    const [numero, setNumero]=useState(0);\r\n    \r\n    const IncrementoDos = ()=>{\r\n        setNumero(numero+2);\r\n        console.log(\"Mensaje de contador\");\r\n    }\r\n     return ( \r\n        <Fragment>\r\n        <button onClick={() => setValor(valor -1)}>Desincrementa</button>\r\n        <pan>   Desincrementar de 1 en 1: {valor}</pan>\r\n        <hr />\r\n        <button onClick={IncrementoDos}>Incrementa</button>\r\n        <span>Incrementar de 2 en 2: {numero}</span>\r\n        </Fragment>\r\n      );\r\n }\r\n  \r\n export default EvaluaParte2;","import React, {useState, Fragment} from 'react'\r\n\r\nconst EvaluaParte3 = () => {\r\n    const [lista, setLista]=useState([]);\r\n    const [mes, setMes]=useState([\"Enero\",\"Febrero\",\"Marzo\",\"Abril\",\"Mayo\",\"Junio\",\"Julio\"]);\r\n    const uniendoArray = [...lista, ...mes];\r\n\r\n    const [numero, setNumero] = useState(1);\r\n    const agregarNumero = () => {\r\n        //console.log(uniendoArray);\r\n        setNumero(numero+1);\r\n        setLista([...lista, numero]);\r\n    }\r\n\r\n    const [texto, setTexto] = useState([\"Agosto\"]);\r\n    const agregarTexto = () => {\r\n        //setTexto(texto);\r\n        setMes([...mes,...texto]);\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h1> Union de las matrices</h1>\r\n            {\r\n                uniendoArray.map((item, index) =>\r\n                <p key = {index} > {item} - {index}</p>\r\n                )\r\n            }\r\n            <hr/>\r\n            <h1>Incrementar en una valor y unir con la matriz 1</h1>\r\n            <button onClick={agregarNumero}>Agregar numero</button>\r\n            {\r\n                lista.map((item, index) =>\r\n                <p key = {index} > {item} - {index}</p>\r\n                )\r\n            }\r\n            <hr/>\r\n            <h1>Incrementar el mes y Número</h1>\r\n            <button onClick={agregarTexto}>Agregar Texto</button>\r\n            {\r\n                mes.map((item, index) =>\r\n                    <p key = {index}> {item} - {index}</p>\r\n                )\r\n            }\r\n        </Fragment>\r\n\r\n     );\r\n}\r\n \r\nexport default EvaluaParte3;","import React from 'react';\n\nimport EvaluacionParte1 from './components/Evaluacion';\nimport EvaluaParte2 from './components/EvaluacionParte2';\nimport EvaluaParte3 from './components/EvaluaionParte3';\n\nfunction App() {\n  return (\n    <div >\n      <EvaluacionParte1/>\n      <hr/>\n      <EvaluaParte2/>\n      <hr/>\n      <EvaluaParte3/>\n    </div>\n   \n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}